(function( $ ){

	/** Prueba Kolmogorov-Smirnov */

	/** *********************************************************************** */
	/* Estadisticos */
	/** *********************************************************************** */
	var statistics = {

		test: function()
		{
			
		}

	};

	/** *********************************************************************** */
	/* PROPIEDADES */
	/** *********************************************************************** */
		
	var properties = {
		/** Estdistico D_alpha tabulado para K-S */
		DNormalAlpha : {
			1: { 0.2: 0.9,	0.1: 0.95,	0.05: 0.975,	0.02: 0.99,	0.01: 0.995 },	
			2: { 0.2: 0.684,	0.1: 0.776,	0.05: 0.842,	0.02: 0.9,	0.01: 0.929 },	
			3: { 0.2: 0.565,	0.1: 0.636,	0.05: 0.78,	0.02: 0.785,	0.01: 0.829 },	
			4: { 0.2: 0.493,	0.1: 0.565,	0.05: 0.624,	0.02: 0.689,	0.01: 0.734 },	
			5: { 0.2: 0.447,	0.1: 0.509,	0.05: 0.563,	0.02: 0.627,	0.01: 0.669 },	
			6: { 0.2: 0.41,	0.1: 0.468,	0.05: 0.519,	0.02: 0.577,	0.01: 0.617 },	
			7: { 0.2: 0.381,	0.1: 0.436,	0.05: 0.483,	0.02: 0.538,	0.01: 0.576 },	
			8: { 0.2: 0.358,	0.1: 0.41,	0.05: 0.454,	0.02: 0.507,	0.01: 0.542 },	
			9: { 0.2: 0.339,	0.1: 0.387,	0.05: 0.43,	0.02: 0.48,	0.01: 0.513 },	
			10: { 0.2: 0.323,	0.1: 0.369,	0.05: 0.409,	0.02: 0.457,	0.01: 0.489 },	
			11: { 0.2: 0.308,	0.1: 0.352,	0.05: 0.391,	0.02: 0.437,	0.01: 0.468 },	
			12: { 0.2: 0.296,	0.1: 0.338,	0.05: 0.375,	0.02: 0.419,	0.01: 0.449 },	
			13: { 0.2: 0.285,	0.1: 0.325,	0.05: 0.361,	0.02: 0.404,	0.01: 0.432 },	
			14: { 0.2: 0.275,	0.1: 0.314,	0.05: 0.349,	0.02: 0.39,	0.01: 0.418 },	
			15: { 0.2: 0.266,	0.1: 0.304,	0.05: 0.338,	0.02: 0.377,	0.01: 0.404 },	
			16: { 0.2: 0.258,	0.1: 0.295,	0.05: 0.327,	0.02: 0.366,	0.01: 0.392 },	
			17: { 0.2: 0.25,	0.1: 0.286,	0.05: 0.318,	0.02: 0.355,	0.01: 0.381 },	
			18: { 0.2: 0.244,	0.1: 0.279,	0.05: 0.309,	0.02: 0.346,	0.01: 0.371 },	
			19: { 0.2: 0.237,	0.1: 0.271,	0.05: 0.301,	0.02: 0.337,	0.01: 0.361 },	
			20: { 0.2: 0.232,	0.1: 0.265,	0.05: 0.294,	0.02: 0.329,	0.01: 0.352 },	
			21: { 0.2: 0.226,	0.1: 0.259,	0.05: 0.287,	0.02: 0.321,	0.01: 0.344 },	
			22: { 0.2: 0.221,	0.1: 0.253,	0.05: 0.281,	0.02: 0.314,	0.01: 0.337 },	
			23: { 0.2: 0.216,	0.1: 0.247,	0.05: 0.275,	0.02: 0.307,	0.01: 0.33 },	
			24: { 0.2: 0.212,	0.1: 0.242,	0.05: 0.269,	0.02: 0.301,	0.01: 0.323 },	
			25: { 0.2: 0.208,	0.1: 0.238,	0.05: 0.264,	0.02: 0.295,	0.01: 0.317 },	
			26: { 0.2: 0.204,	0.1: 0.233,	0.05: 0.259,	0.02: 0.29,	0.01: 0.311 },	
			27: { 0.2: 0.2,	0.1: 0.229,	0.05: 0.254,	0.02: 0.284,	0.01: 0.305 },	
			28: { 0.2: 0.197,	0.1: 0.225,	0.05: 0.25,	0.02: 0.279,	0.01: 0.3 },	
			29: { 0.2: 0.193,	0.1: 0.221,	0.05: 0.246,	0.02: 0.275,	0.01: 0.295 },	
			30: { 0.2: 0.19,	0.1: 0.218,	0.05: 0.242,	0.02: 0.27,	0.01: 0.29 },	
			31: { 0.2: 0.187,	0.1: 0.214,	0.05: 0.238,	0.02: 0.266,	0.01: 0.285 },	
			32: { 0.2: 0.184,	0.1: 0.211,	0.05: 0.234,	0.02: 0.262,	0.01: 0.281 },	
			33: { 0.2: 0.182,	0.1: 0.208,	0.05: 0.231,	0.02: 0.258,	0.01: 0.277 },	
			34: { 0.2: 0.179,	0.1: 0.205,	0.05: 0.227,	0.02: 0.254,	0.01: 0.273 },	
			35: { 0.2: 0.177,	0.1: 0.202,	0.05: 0.224,	0.02: 0.251,	0.01: 0.269 },	
			36: { 0.2: 0.174,	0.1: 0.199,	0.05: 0.221,	0.02: 0.247,	0.01: 0.265 },	
			37: { 0.2: 0.172,	0.1: 0.196,	0.05: 0.218,	0.02: 0.244,	0.01: 0.262 },	
			38: { 0.2: 0.17,	0.1: 0.194,	0.05: 0.215,	0.02: 0.241,	0.01: 0.258 },	
			39: { 0.2: 0.168,	0.1: 0.191,	0.05: 0.213,	0.02: 0.238,	0.01: 0.255 },	
			40: { 0.2: 0.165,	0.1: 0.189,	0.05: 0.21,	0.02: 0.235,	0.01: 0.252 }
		},

		DLillieforsNormal : {
			4:	{0.2:	0.303,	0.15:	0.321,	0.1:	0.346,	0.05:	0.376,	0.01:	0.413,	0.001:	0.433},	
			5:	{0.2:	0.289,	0.15:	0.303,	0.1:	0.319,	0.05:	0.343,	0.01:	0.997,	0.001:	0.439},	
			6:	{0.2:	0.269,	0.15:	0.281,	0.1:	0.297,	0.05:	0.323,	0.01:	0.371,	0.001:	0.424},	
			7:	{0.2:	0.252,	0.15:	0.264,	0.1:	0.28,	0.05:	0.304,	0.01:	0.351,	0.001:	0.402},	
			8:	{0.2:	0.239,	0.15:	0.25,	0.1:	0.265,	0.05:	0.288,	0.01:	0.333,	0.001:	0.384},	
			9:	{0.2:	0.227,	0.15:	0.238,	0.1:	0.252,	0.05:	0.274,	0.01:	0.317,	0.001:	0.365},	
			10:	{0.2:	0.217,	0.15:	0.228,	0.1:	0.241,	0.05:	0.262,	0.01:	0.304,	0.001:	0.352},	
			11:	{0.2:	0.208,	0.15:	0.218,	0.1:	0.231,	0.05:	0.251,	0.01:	0.291,	0.001:	0.338},	
			12:	{0.2:	0.2,	0.15:	0.21,	0.1:	0.222,	0.05:	0.242,	0.01:	0.281,	0.001:	0.325},	
			13:	{0.2:	0.193,	0.15:	0.202,	0.1:	0.215,	0.05:	0.234,	0.01:	0.271,	0.001:	0.314},	
			14:	{0.2:	0.187,	0.15:	0.196,	0.1:	0.208,	0.05:	0.226,	0.01:	0.262,	0.001:	0.305},	
			15:	{0.2:	0.181,	0.15:	0.19,	0.1:	0.201,	0.05:	0.219,	0.01:	0.254,	0.001:	0.296},	
			16:	{0.2:	0.176,	0.15:	0.184,	0.1:	0.195,	0.05:	0.213,	0.01:	0.247,	0.001:	0.287},	
			17:	{0.2:	0.171,	0.15:	0.179,	0.1:	0.19,	0.05:	0.207,	0.01:	0.24,	0.001:	0.279},	
			18:	{0.2:	0.167,	0.15:	0.175,	0.1:	0.185,	0.05:	0.202,	0.01:	0.234,	0.001:	0.273},	
			19:	{0.2:	0.163,	0.15:	0.17,	0.1:	0.181,	0.05:	0.197,	0.01:	0.228,	0.001:	0.266},	
			20:	{0.2:	0.159,	0.15:	0.166,	0.1:	0.176,	0.05:	0.192,	0.01:	0.223,	0.001:	0.26},	
			25:	{0.2:	0.143,	0.15:	0.15,	0.1:	0.159,	0.05:	0.173,	0.01:	0.201,	0.001:	0.236},	
			30:	{0.2:	0.131,	0.15:	0.138,	0.1:	0.146,	0.05:	0.159,	0.01:	0.185,	0.001:	0.217}
		}
	};

	/** *********************************************************************** */
	/* METODOS */
	/** *********************************************************************** */
	
	var methods = {
	   	init : function( options ) {
			return this;
		},

		getDNormal: function(n, alpha) {
			//console.log("n: ", n, "alpha: ", alpha);

			if(0 < n && n <= 40)
			{
				return properties.DNormalAlpha[n][alpha];
			} else {

				alpha = "" + alpha;
				
				switch(alpha){
					case '0.01':
						return (1.07 / Math.sqrt(n));
					break;
					case '0.02':
						return (1.22 / Math.sqrt(n));
					break;
					case '0.05':
						return (1.36 / Math.sqrt(n));
					break;
					case '0.1':
						return (1.52 / Math.sqrt(n));
					break;
					case '0.2':
						return (1.63 / Math.sqrt(n));
					break;
				}
			}

		},

		normal: function(vector, mean, stdev)
		{
			var mean = parseFloat(mean);
			var stdev = parseFloat(stdev);
			var variance = stdev*stdev;

			//console.log("mean: " + mean, "stdev: " + stdev, "variance: " + variance);
			var N = vector[0].length;
			var i;
			var d, D, Fe;

			for(i=1; i < N+1; i++) {

				x = vector[0][(i-1)];
				Ft = jStat.normal.cdf( x, mean, stdev);
				
				//console.log(Ft);

				dp=(i/N - Ft);
				dm=(Ft - (i-1)/N);
				
				D = Math.max( dp, dm );
				
				if(d == undefined)
					d = D;
				else
					d = Math.max( D, d );

				//console.log("i: " +i, "D+ = " + dp + " | D- = " + dm + " [d: " + d + "]" + " [D: " + D + "]");
			}
			//console.log("d: " + d);

			return d;
		},

		exponential: function()
		{
			//console.log( vector );

			var mean = parseFloat(vector.mean().toPrecision(5));
			var stdev = parseFloat(jStat.stdev(vector[0], true).toPrecision(5));
			var variance = stdev*stdev;

			//console.log("mean: " + mean, "stdev: " + stdev, "variance: " + variance);
			var N = vector[0].length;
			var i;
			var d, D, Fe;

			//console.log(jStat.exponential.cdf( 66, 1/100));
			//return;

			//console.log(jStat.normal.cdf(-1.628, 0, 1));
			//return;

			for(i=1; i < N+1; i++) {

				//dp=(i/N - jStat.normal.cdf(i, mean, variance));
				//dm=(jStat.normal.pdf(i, mean, stdev) - i/N);

				Ft = jStat.exponential.cdf( vector[0][(i-1)], 1/100);
				//Ft = jStat.normal.cdf( vector[0][(i-1)], 50, 10);
				//Ft = jStat.normal.cdf( properties.vector[0][(i-1)], mean, stdev);
				
				//console.log(Ft);

				dp=(i/N - Ft);
				dm=(Ft - (i-1)/N);
				
				D = Math.max( dp, dm );
				
				if(d == undefined)
					d = D;
				else
					d = Math.max( D, d );

				//console.log("i: " +i, "D+ = " + dm + " | D- = " + dp + " [d: " + d + "]" + " [D: " + D + "]");
			}
			//console.log("d: " + d);

			return d;
		},


		getDLillieforsNormal: function(n, alpha) {
			//console.log("n: ", n, "alpha: ", alpha);

			if(4 <= n && n <= 30)
			{
				return properties.DLillieforsNormal[n][alpha];
			} else {

				alpha = "" + alpha;
				
				switch(alpha){
					case '0.01':
						return (1.07 / Math.sqrt(n));
					break;
					case '0.02':
						return (1.22 / Math.sqrt(n));
					break;
					case '0.05':
						return (1.36 / Math.sqrt(n));
					break;
					case '0.1':
						return (1.52 / Math.sqrt(n));
					break;
					case '0.2':
						return (1.63 / Math.sqrt(n));
					break;
				}
			}

		},

		lilliefors: function(vector)
		{
			var mean = parseFloat(vector.mean());
			var stdev = parseFloat(vector.stdev());
			var variance = stdev*stdev;

			//console.log("mean: " + mean, "stdev: " + stdev, "variance: " + variance);
			var N = vector[0].length;
			var i;
			var d, D, Fe;

			for(i=1; i < N+1; i++) {

				x = vector[0][(i-1)];
				Ft = jStat.normal.cdf( x, mean, stdev);
				
				//console.log(Ft);

				dp=(i/N - Ft);
				dm=(Ft - (i-1)/N);
				
				D = Math.max( dp, dm );
				
				if(d == undefined)
					d = D;
				else
					d = Math.max( D, d );

				//console.log("i: " +i, "D+ = " + dp + " | D- = " + dm + " [d: " + d + "]" + " [D: " + D + "]");
			}
			//console.log("d: " + d);

			return d;
		}
	};

	/** *********************************************************************** */
	/* jQuery Plugin architecture */
	/** *********************************************************************** */

	jQuery.hypothesistesting.test.ks = function( method ) {
		// Method calling logic
		if ( methods[method] ) {
			return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
		} else if ( typeof method === 'object' || ! method ) {
			return methods.init.apply( this, arguments );
		} else {
			jQuery.error( 'Method ' +  method + ' does not exist on jQuery.hypothesistesting.test.k_s' );
		}
	};

})( jQuery );